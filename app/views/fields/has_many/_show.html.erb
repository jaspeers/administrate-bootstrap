<%#
# HasMany Show Partial

This partial renders a has_many relationship,
to be displayed on a resource's show page.

By default, the relationship is rendered
as a table of the first few associated resources.
The columns of the table are taken
from the associated resource class's dashboard.

## Local variables:

- `field`:
  An instance of [Administrate::Field::HasMany][1].
  Contains methods to help display a table of associated resources.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Field/HasMany
%>

<% if field.resources.any? %>
  <%= render(
    "collection",
    collection_presenter: field.associated_collection,
    page_resource: defined?(page_resource) ? page_resource : nil,
    resources: field.resources,
    reorder_action: field.reorder_action,
  ) %>

  <% if field.more_than_limit? %>
    <span>
      <%= t(
        'administrate.fields.has_many.more',
        count: field.limit,
        total_count: field.data.count,
      ) %>
    </span>
    <br/><br/>
  <% end %>

<% else %>
  <%= t("administrate.fields.has_many.none", default: "â€“") %>
<% end %>

<% if field.upload_action.present? %>
  <%= form_for([field.upload_action, namespace, page_resource], html: { class: "form-inline", multipart: true }, method: :post) do |f| %>
    <div class="form-group">
      <p class="form-control-static">Add more:</p>
    </div>
    <div class="form-group">
      <input type="file" name="files[]" id="files" multiple="multiple">
    </div>
    <button type="submit" class="btn btn-primary">Upload</button>
  <% end %>
<% end %>

<% if field.action_links.present? %>
  <% field.action_links.each do |action_link| %>
    <%= link_to(
            "<button class='btn btn-default'>#{action_link[:name]}</button>".html_safe,
            [action_link[:action], namespace, page_resource]
        ) %>
  <% end %>
<% end %>
